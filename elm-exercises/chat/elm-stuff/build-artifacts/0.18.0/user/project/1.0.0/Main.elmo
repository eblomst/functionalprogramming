var _user$project$Main$viewMessage = function (message) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(message),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$msgToString = function (msg) {
	var _p0 = msg;
	if (_p0.ctor === 'Ok') {
		return _p0._0;
	} else {
		return 'Can\'t decode';
	}
};
var _user$project$Main$decodeMessage = function (message) {
	return A2(
		_elm_lang$core$Json_Decode$decodeString,
		A2(_elm_lang$core$Json_Decode$field, 'content', _elm_lang$core$Json_Decode$string),
		message);
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'PostChatMessage':
				var message = _elm_lang$core$Json_Encode$object(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'command',
							_1: _elm_lang$core$Json_Encode$string('send')
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'content',
								_1: _elm_lang$core$Json_Encode$string(model.userMessage)
							},
							_1: {ctor: '[]'}
						}
					});
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{userMessage: ''}),
					{
						ctor: '::',
						_0: A2(
							_elm_lang$websocket$WebSocket$send,
							'ws://localhost:3000/',
							A2(_elm_lang$core$Json_Encode$encode, 0, message)),
						_1: {ctor: '[]'}
					});
			case 'UpdateUserMessage':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{userMessage: _p1._0}),
					{ctor: '[]'});
			case 'NewChatMessage':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							chatMessage: A2(
								_elm_lang$core$List$append,
								{
									ctor: '::',
									_0: _user$project$Main$msgToString(
										_user$project$Main$decodeMessage(_p1._0)),
									_1: {ctor: '[]'}
								},
								model.chatMessage)
						}),
					{ctor: '[]'});
			case 'SetUserName':
				var username = _elm_lang$core$Json_Encode$object(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'command',
							_1: _elm_lang$core$Json_Encode$string('login')
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'content',
								_1: _elm_lang$core$Json_Encode$string(model.username)
							},
							_1: {ctor: '[]'}
						}
					});
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{username: ''}),
					{
						ctor: '::',
						_0: A2(
							_elm_lang$websocket$WebSocket$send,
							'ws://localhost:3000/',
							A2(_elm_lang$core$Json_Encode$encode, 0, username)),
						_1: {ctor: '[]'}
					});
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{username: _p1._0}),
					{ctor: '[]'});
		}
	});
var _user$project$Main$Model = F3(
	function (a, b, c) {
		return {chatMessage: a, userMessage: b, username: c};
	});
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: A3(
		_user$project$Main$Model,
		{ctor: '[]'},
		'',
		''),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Main$ChatMessage = F2(
	function (a, b) {
		return {command: a, content: b};
	});
var _user$project$Main$SetUserName = {ctor: 'SetUserName'};
var _user$project$Main$NewChatMessage = function (a) {
	return {ctor: 'NewChatMessage', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return A2(_elm_lang$websocket$WebSocket$listen, 'ws://localhost:3000', _user$project$Main$NewChatMessage);
};
var _user$project$Main$UpdateUserMessage = function (a) {
	return {ctor: 'UpdateUserMessage', _0: a};
};
var _user$project$Main$UpdateUsername = function (a) {
	return {ctor: 'UpdateUsername', _0: a};
};
var _user$project$Main$PostChatMessage = {ctor: 'PostChatMessage'};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$placeholder('username.. '),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$autofocus(true),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$value(model.username),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$UpdateUsername),
								_1: {ctor: '[]'}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$SetUserName),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Login'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$placeholder('message...'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$autofocus(true),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$value(model.userMessage),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$UpdateUserMessage),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$PostChatMessage),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Submit'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{ctor: '[]'},
								A2(_elm_lang$core$List$map, _user$project$Main$viewMessage, model.chatMessage)),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
